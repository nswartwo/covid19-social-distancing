##### covid infographics code  #####
##### load in libraries 
library(reshape2)
library(waffle)
library(extrafont)
library(grid)
library(scales)
library(dplyr)
library(ggplot2)
#set working directory to where package is cloned
setwd("~/COVID19-baby-model")
source("functions.R")
#####set a cspec color palette
# (based on website and logo)
cspec_pal<-c("#1c133c", "#0089b8", "#be1622", "#ffffff")
#####define ggplot themes 
#best for non-line plots
#recommend using cspec_pal[3] for the fill of a bar/col plot
cspec_theme <- function() {
  theme(
    plot.background = element_rect(fill = cspec_pal[4], colour = cspec_pal[4]),
    panel.background = element_rect(fill = cspec_pal[4]),
    axis.text = element_text(colour = cspec_pal[1], family = "Impact"),
    plot.title = element_text(colour = cspec_pal[3], face = "bold", size = 18, vjust = 1, family = "Impact"),
    axis.title = element_text(colour = cspec_pal[3], face = "bold", size = 13, family = "Impact"),
    panel.grid.major.x = element_line(colour = cspec_pal[1]),
    panel.grid.minor.x = element_blank(),
    panel.grid.major.y = element_blank(),
    panel.grid.minor.y = element_blank(),
    strip.text = element_text(family = "Impact", colour = cspec_pal[2]),
    strip.background = element_rect(fill = cspec_pal[1]),
    axis.ticks = element_line(colour = cspec_pal[1])
  )
}
### best for line plots 
### recommended that cspec_pal[1] and cspec_pal[3] be used for data lines (where limited data presented)
### example: use cspec_pal[3] for basecase and cspec_pal[1] for intervention. 
cspec_theme2 <- function() {
  theme(
    legend.title = element_text(family = "Impact", colour = cspec_pal[2], size = 10),
    legend.background = element_rect(fill = cspec_pal[4]),
    legend.key = element_rect(fill = cspec_pal[4], colour = cspec_pal[4]),
    legend.text = element_text(family = "Impact", colour = cspec_pal[2], size = 10),
    plot.background = element_rect(fill = cspec_pal[4], colour = cspec_pal[4]),
    panel.background = element_rect(fill = cspec_pal[4]),
    axis.text = element_text(colour = cspec_pal[2], family = "Impact"),
    plot.title = element_text(colour = cspec_pal[3], face = "bold", size = 18, vjust = 1, family = "Impact"),
    axis.title = element_text(colour = cspec_pal[3], face = "bold", size = 13, family = "Impact"),
    panel.grid.major.y = element_line(colour = cspec_pal[2]),
    panel.grid.minor.y = element_blank(),
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank(),
    strip.text = element_text(family = "Impact", colour = cspec_pal[2]),
    strip.background = element_rect(fill = cspec_pal[2]),
    axis.ticks = element_line(colour = cspec_pal[4])
  )
}

###waffle plot
cspec_theme_waf <- function() {
  theme(
    legend.title = element_text(family = "Impact", colour = cspec_pal[2], size = 10), 
    legend.background = element_rect(fill = cspec_pal[4]),
    legend.key = element_rect(fill = cspec_pal[4], colour = cspec_pal[4]),
    legend.text = element_text(family = "Impact", colour = cspec_pal[2], size = 10),
    plot.background = element_rect(fill = cspec_pal[4], colour = cspec_pal[4]),
    axis.text = element_blank(),
    plot.title = element_text(colour = cspec_pal[3], face = "bold", size = 18, vjust = 1, family = "Impact"),
    axis.title = element_blank(),
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank(),
    panel.grid.major.y = element_blank(),
    panel.grid.minor.y = element_blank(),
    strip.text = element_text(family = "Impact", colour = cspec_pal[2]),
    strip.background = element_rect(fill = cspec_pal[1]),
    axis.ticks = element_blank()
  )
}

#####make a plot showing that intervention timing is important 
#this plot displays the results of comparing an intervention 
#starting on day 1 and on day n. The intervention is defined by 
#50% of the population being in social distancing. Case counts are 
#compared 28 days after the later intervention. For example, the bar 
#at x=20 is the comparison of case counts at day 49 
#(intervention day 21-intervention day 1). 
timing_plot<-function(){

  simulation_length_vec<-28:78
  timing_ratio_vec<-rep(0,length(simulation_length_vec))
  cases_vec<-effect_ratio_vec<-rep(0,length(simulation_length_vec))
  
  for(i in 1:length(simulation_length_vec)){
    print(paste("running simulation #", i, "of 100"))
    simulation_length<-simulation_length_vec[i]
    
    ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### #####
    ##### #####  explore the effects of intervention timing  ##### #####
    ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### #####

    #basecase is start intervention on day 1
    intv_timing_early<-1
    #compare to starting it on day n 
    intv_timing_late<-i
    #set social distancing to 50% social distancing  
    sd_proportion<-.5
    
    ### run intervention 
    ###format the data 
    sde_out<-process_params(t=simulation_length, per2 = intv_timing_early, per3=intv_timing_early, 
            contact_mod_1 = sd_proportion, contact_mod_2 = sd_proportion)
    
    sdl_out<-process_params(t=simulation_length, per2 = intv_timing_late, per3=intv_timing_late, 
                            contact_mod_1 = sd_proportion, contact_mod_2 = sd_proportion)
    
    ###filter down to total infected (detected and total)

    sde_out_cases = sde_out %>% gather(var, value, I_cum, I_cum_det) %>% group_by(var, int) %>% 
      mutate(value_diff = c(NA, diff(value))) %>%
      gather(var2, value2, value, value_diff) %>%
      mutate(var_lab = ifelse(var == "I_cum", "All", "Detected"),
             cat_lab = ifelse(var2=="value", "Cumulative cases", "New cases"))%>% 
      select("var_lab", "cat_lab", "var", "value2","int") %>%
      filter(int==as.name("Social distancing")& cat_lab==as.name("Cumulative cases"))
    
    
    
    sdl_out_cases = sdl_out %>% gather(var, value, I_cum, I_cum_det) %>% group_by(var, int) %>% 
      mutate(value_diff = c(NA, diff(value))) %>%
      gather(var2, value2, value, value_diff) %>%
      mutate(var_lab = ifelse(var == "I_cum", "All", "Detected"),
             cat_lab = ifelse(var2=="value", "Cumulative cases", "New cases"))%>% 
      select("var_lab", "cat_lab", "var", "value2","int") %>%
      filter(int==as.name("Social distancing")& cat_lab==as.name("Cumulative cases"))

    #whats the difference of cases based on timing
    cases_vec[i]<-as.numeric(sdl_out_cases[simulation_length,4]/sde_out_cases[simulation_length,4])
  } 
##make a bar plot
  #make a dataframe 
  cases_df<-data.frame(Delay=1:50, CaseRatio=cases_vec[-1] )

  t3<- ggplot(cases_df, aes(x=CaseRatio, y=Delay))+geom_col(fill=cspec_pal[2])+coord_flip()+
    labs(y="Intervention Delay (in Days)", x="Additional Case Ratio vs. Day 1 Intervention",
         title="Every day we delay an intervention, cases counts increase!")+cspec_theme()
  return(t3)
}

#####make a plot showing the difference between social distancing percentages
#this plot shows the difference between 25% and 50% of the population in social
#distancing after 4 weeks. 

effective_plot<-function(){

  simulation_length<-30

  ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### #####
  ###Explore the effects of Effectiveness ##### ##### ##### ##### ##### 
  ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### #####
  
  ## we will use the "early==day 1" social distancing
  intv_timing_early<-1
  #set social distancing to 50% social distancing  
  sd_proportion<-.5
  # baseline social distancing is 50% (results are in sde_out)
  # will explore social distancing at 25%
  #set social distancing to 50% social distancing  
  sdhalf_proportion<-.25
  
  ### run intervention 
  ###format the data 
  sde_out<-process_params(t=simulation_length, per2 = intv_timing_early, per3=intv_timing_early, 
                          contact_mod_1 = sd_proportion, contact_mod_2 = sd_proportion)
  
  sdhalf_out<-process_params(t=simulation_length, per2 = intv_timing_early, per3=intv_timing_early, 
                          contact_mod_1 = sdhalf_proportion, contact_mod_2 = sdhalf_proportion)
  
  ###filter down to total infected (detected and total)
  
  sde_out_cases = sde_out %>% gather(var, value, I_cum, I_cum_det) %>% group_by(var, int) %>% 
    mutate(value_diff = c(NA, diff(value))) %>%
    gather(var2, value2, value, value_diff) %>%
    mutate(var_lab = ifelse(var == "I_cum", "All", "Detected"),
           cat_lab = ifelse(var2=="value", "Cumulative cases", "New cases"))%>% 
    select("time","var_lab", "cat_lab", "var", "value2","int") %>%
    filter(int==as.name("Social distancing")& cat_lab==as.name("Cumulative cases")& var_lab=="All")
  
  
  
  sdhalf_out_cases = sdhalf_out %>% gather(var, value, I_cum, I_cum_det) %>% group_by(var, int) %>% 
    mutate(value_diff = c(NA, diff(value))) %>%
    gather(var2, value2, value, value_diff) %>%
    mutate(var_lab = ifelse(var == "I_cum", "All", "Detected"),
           cat_lab = ifelse(var2=="value", "Cumulative cases", "New cases"))%>% 
    select("time", "var_lab", "cat_lab", "var", "value2","int") %>%
    filter(int==as.name("Social distancing")& cat_lab==as.name("Cumulative cases") & var_lab=="All")
  
  #make a single dataframe for ggplot
  sd_effective_cases<-data.frame("time"=sde_out_cases[,1],
                                 "50%"=sde_out_cases[,5],
                                 "25%"=sdhalf_out_cases[,5])
  colnames(sd_effective_cases)<-c("time", "50%", "25%")
  #melt it down
  sd_effective_melt<-melt(sd_effective_cases, id.vars = "time")
  #calculate the ratio of cases with effectiveness
  effective_ratio<-round(as.numeric(sde_out_cases[simulation_length,5])/as.numeric(sdhalf_out_cases[simulation_length,5]),2)

e1 = ggplot(sd_effective_melt, aes(x = time, y = value, group=variable, color=variable)) +
    scale_color_manual(values=c(cspec_pal[1], cspec_pal[3]))+
    geom_line(size=1.5) + theme(legend.position = c(0.1,.32))+
    # geom_dl(aes(label=round(value,0)), method=list(dl.trans(x = x + .2), "last.points")) +
    labs(color="Percentage of Normal Contacts", x = "Time (days)", y = "", 
         title = paste0("Implementing public health measures at half effectiveness results in ", effective_ratio,  " times more cases in 4 weeks.")) +cspec_theme2()

  return(e1)
}

#####make a plot that shows that ending measures early will result in more cases
#This plot shows the case ratio for a simulation that has social distancing of 
#50% of the population. We will start two interventions on the first day of the seventh week
#of the simulation; one will run for 4 weeks and another for 8 weeks. Case counts are evaluated on day 
#140 of the simulation. 
persist_plot<-function(){

  simulation_length<-140 

  ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### #####
  ###Explore the effects of Persistence ##### ##### ##### ##### ##### 
  ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### #####
  intv_timing_early<-43
  intv_timing_earlyend<-77
  intv_timing_lateend<-99
  #set social distancing to 50% social distancing  
  sd_proportion<-.5

  ### run intervention 
  ###format the data 
  sde_out<-process_params(t=simulation_length, per2 = intv_timing_early, per3=intv_timing_lateend, 
                          contact_mod_1 = sd_proportion, contact_mod_2 = 1)
  
  sdend_out<-process_params(t=simulation_length, per2 = intv_timing_early, per3=intv_timing_earlyend, 
                             contact_mod_1 = sd_proportion, contact_mod_2 = 1)
  
  ###filter down to total infected (detected and total)
  
  sde_out_cases = sde_out %>% gather(var, value, I_cum, I_cum_det) %>% group_by(var, int) %>% 
    mutate(value_diff = c(NA, diff(value))) %>%
    gather(var2, value2, value, value_diff) %>%
    mutate(var_lab = ifelse(var == "I_cum", "All", "Detected"),
           cat_lab = ifelse(var2=="value", "Cumulative cases", "New cases"))%>% 
    select("time","var_lab", "cat_lab", "var", "value2","int") %>%
    filter(int==as.name("Social distancing")& cat_lab==as.name("Cumulative cases")& var_lab=="All")
  
  sdend_out_cases = sdend_out %>% gather(var, value, I_cum, I_cum_det) %>% group_by(var, int) %>% 
    mutate(value_diff = c(NA, diff(value))) %>%
    gather(var2, value2, value, value_diff) %>%
    mutate(var_lab = ifelse(var == "I_cum", "All", "Detected"),
           cat_lab = ifelse(var2=="value", "Cumulative cases", "New cases"))%>% 
    select("time", "var_lab", "cat_lab", "var", "value2","int") %>%
    filter(int==as.name("Social distancing")& cat_lab==as.name("Cumulative cases") & var_lab=="All")
  
  #make a single dataframe for ggplot
  
  sd_end_cases<-data.frame("time"=sde_out_cases[30:100,1],
                           "earlyend"=sdend_out_cases[30:100,5],
                           "full"=sde_out_cases[30:100,5]
  )
  colnames(sd_end_cases)<-c("time", "4weeks", "8weeks")
  #melt it down
  sd_end_melt<-melt(sd_end_cases, id.vars = "time")
  
  #waffle plot
  waffle_size<-52
  inf_full<-20
  case_ratio<-round(sd_end_cases[nrow(sd_end_cases),2]/sd_end_cases[nrow(sd_end_cases),3],2)
  inf_end<-inf_full*case_ratio
  
  per_waffle<-waffle(
    c(`8 week intervention`=inf_full, `4 week intervention`=inf_end), use_glyph = "user", colors = c(cspec_pal[1],cspec_pal[3]),
    legend_pos = "right", rows=5,title = paste0("Ending public health measures four weeks earlier will result in ", case_ratio , " times more cases after 6 weeks." ))+cspec_theme_waf()
  
  return(per_waffle)
}
##### make a plot that shows that even when tranmission is slowed, confirmed cases will still rise
#simulation is 30 days long; on day 10 transmission is reduced by 
#either a factor of 4, 3, or completely zeroed out. We create a line plot
#to show the case detection lag.

patience_plot<-function(){
#factor to reduce social distancing by
sd_contacts<-c(0,.1,.2)
#x is necessary for accumulating case counts later 
detach(package:plyr)
  x<-1:4
  for(i in 1:length(sd_contacts)){
    print(paste("running simulation #", i, "of 3"))   
    #run for a total of 30 days
    simulation_length<-50
    ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### #####
    ##### #####  explore the effects of patience   ##### #####
    ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### #####
    ###set the timing of the intervention 
    intv_timing_early<-10
    ### set the SD contacts proportion 
    sd_proportion<-sd_contacts[i]
    ### run intervention 
    ###format the data 
    sde_out<-process_params(t=simulation_length, per2 = intv_timing_early, per3=intv_timing_early, 
                            contact_mod_1 = sd_proportion, contact_mod_2 = sd_proportion)
    
    sdp_out<-process_params(t=simulation_length, per2 = intv_timing_early, per3=intv_timing_early, 
                              contact_mod_1 = sd_proportion, contact_mod_2 = sd_proportion)
    
    ###filter down to total infected (detected and total)
    
    sde_out_cases = sde_out %>% gather(var, value, I_cum, I_cum_det) %>% group_by(var, int) %>% 
      mutate(value_diff = c(NA, diff(value))) %>%
      gather(var2, value2, value, value_diff) %>%
      mutate(var_lab = ifelse(var == "I_cum", "All", "Detected"),
             cat_lab = ifelse(var2=="value", "Cumulative cases", "New cases"))%>% 
      select("time","var_lab", "cat_lab", "var", "value2","int") %>%
      filter(int==as.name("Social distancing")& cat_lab==as.name("New cases")& var_lab=="Detected")
    
    sdp_out_cases = sdp_out %>% gather(var, value, I_cum, I_cum_det) %>% group_by(var, int) %>% 
      mutate(value_diff = c(NA, diff(value))) %>%
      gather(var2, value2, value, value_diff) %>%
      mutate(var_lab = ifelse(var == "I_cum", "All", "Detected"),
             cat_lab = ifelse(var2=="value", "Cumulative cases", "New cases")) %>% 
      select("time", "var_lab", "cat_lab", "var", "value2","int") %>%
      filter(int==as.name("Social distancing")& cat_lab==as.name("New cases") & var_lab=="Detected")
    sdp_out_cases[1,5]<-0
    sd_patience_cases<-data.frame("time"=sdp_out_cases[,1],
                                   "DoubleTimeMultiplier"=as.factor(i),
                                   "detected"=as.numeric(as.character(unlist(sdp_out_cases[,5])))
                                   # "infected"=as.numeric(as.character(unlist(sdp_out_cases[,5])))+as.numeric(as.character(unlist(sdp_out_cases[,5])))
    )
    #combine all the different runs together
        x<-rbind(x,sd_patience_cases)
  }
  #remove the dummy row 
  x<-x[-1,]
  #melt it down
  sd_patience_melt2<-melt(x, id.vars = c("time", "DoubleTimeMultiplier"))
  
  yint<-as.numeric(sd_patience_melt2%>%filter(time==intv_timing_early & variable=="detected" & DoubleTimeMultiplier==1)%>%select(value))
  m<-sd_patience_melt2 %>% group_by(DoubleTimeMultiplier) %>%summarize(maxCases=max(value), maxTime=time[which(value==max(value))])
  
  pat3= ggplot(sd_patience_melt2%>%filter(variable=="detected"), aes(x = time, y = value, group=DoubleTimeMultiplier, color=DoubleTimeMultiplier) )+
    geom_line(size=1.5) + theme(legend.position = c(.85,.45)) +  
    labs(x="Days ", y="New Confirmed Cases", color="",
         title="Even though measures are working, confirmed cases will still continue to rise before they fall.", fill="")+cspec_theme2()+
    annotate(geom="text", label="start reduction measures",color=cspec_pal[1], fontface=2, x=intv_timing_early-5.5,y=yint+.1, size=5)+
    geom_segment(x = intv_timing_early-5, y = yint, xend = intv_timing_early-.2, yend = yint,
                 arrow = arrow(length = unit(.4, "cm")), size=1.2, color=cspec_pal[1])+
    geom_point(data=m, aes(x=maxTime, y=maxCases, fill="Maximum Confirmed Cases"), size=3.5, show.legend = TRUE)+
    scale_color_manual(labels=c("Zero disease transmission", 
                                "10% of current disease transmission rate", 
                                "20% of current disease transmission rate",
                                "Maximum Cases Reached"),values=c("grey35", cspec_pal[1],cspec_pal[3], cspec_pal[2]))+theme(    legend.margin = margin(0, 0, 0, 0))

  return(pat3)
}

#####combine all plots and text into the infographic 
#create the plots
time<-timing_plot()
effect<-effective_plot()
persist<-persist_plot()
patience<-patience_plot()

# Generate Infographic in PNG Format
png("~/Desktop/cspec_infographic2.png", width = 12, height = 22, units = "in", res = 500)
grid.newpage() 
pushViewport(viewport(layout = grid.layout(nrow=10, ncol=4, 
                                           heights =c(5,1, 5,1, 5,1,5,1.2,5,.5))))
vplayout <- function(x, y) viewport(layout.pos.row = x, layout.pos.col = y)

grid.rect(gp = gpar(fill = cspec_pal[4], col = cspec_pal[4]))
grid.text("COVID-19", y = unit(1, "npc"), x = unit(0.5, "npc"), vjust = 1, hjust = .5, gp = gpar(fontfamily = "Impact", col = cspec_pal[3], cex = 12))
grid.text("action plan", y = unit(0.92, "npc"), gp = gpar(fontfamily = "Impact", col = cspec_pal[1], cex = 6.4))
grid.text("by COVID-19 Statistics, Policy Modeling, and Epidemiology Collective", vjust = 0, y = unit(0.89, "npc"), gp = gpar(fontfamily = "Impact", col = cspec_pal[2], cex = 1))
grid.text("http://covid-spec.org/", vjust = 0, y = unit(0.881, "npc"), gp = gpar(fontfamily = "Impact", col = cspec_pal[2], cex = 1))
grid.text("code and documentation can be found at https://github.com/abilinski/COVID19/blob/master/cspec_infographic_plot.R", vjust = 0, y = unit(0.005, "npc"), gp = gpar(fontfamily = "Impact", col = cspec_pal[1], cex = 1))

####line break 
grid.text("it's on you to...", y = unit(0.86, "npc"), x = unit(0.5, "npc"), vjust = .5, hjust = .5, gp = gpar(fontfamily = "Impact", col = cspec_pal[3], cex = 5))

#first plot
print(time, vp = vplayout(3, 1:4))
#second plot
print(effect, vp = vplayout(5, 1:4))
#third plot
print(persist, vp = vplayout(7, 1:3))
#fourth plot 
print(patience, vp = vplayout(9, 1:4))
#text block one
grid.rect(gp = gpar(fill = cspec_pal[1], col = cspec_pal[1]), x = unit(0.5, "npc"), y = unit(0.82, "npc"), width = unit(1, "npc"), height = unit(0.035, "npc"))
grid.text("...BE IMMEDIATE", y = unit(0.82, "npc"), x = unit(0.5, "npc"), vjust = .5, hjust = .5, gp = gpar(fontfamily = "Impact", col = cspec_pal[3], cex = 4))
#text block two
grid.rect(gp = gpar(fill = cspec_pal[1], col = cspec_pal[1]), x = unit(0.5, "npc"), y = unit(.615, "npc"), width = unit(1, "npc"), height = unit(0.035, "npc"))
grid.text("...BE DEFINITIVE", y = unit(.615, "npc"), x = unit(0.5, "npc"), vjust = .5, hjust = .5, gp = gpar(fontfamily = "Impact", col = cspec_pal[3], cex = 4))
#text block three
grid.rect(gp = gpar(fill = cspec_pal[1], col = cspec_pal[1]), x = unit(0.5, "npc"), y = unit(.41, "npc"), width = unit(1, "npc"), height = unit(0.035, "npc"))
grid.text("...BE PERSISTENT", y = unit(.41, "npc"), x = unit(0.5, "npc"), vjust = .5, hjust = .5, gp = gpar(fontfamily = "Impact", col = cspec_pal[3], cex = 4))
#text block four
grid.rect(gp = gpar(fill = cspec_pal[1], col = cspec_pal[1]), x = unit(0.5, "npc"), y = unit(0.205, "npc"), width = unit(1, "npc"), height = unit(0.034, "npc"))
grid.text("...BE PATIENT", y = unit(0.205, "npc"), x = unit(0.5, "npc"), vjust = .5, hjust = .5, gp = gpar(fontfamily = "Impact", col = cspec_pal[3], cex = 4))

dev.off()

# Generate Infographic in PNG Format
png("~/Desktop/cspec_infographic3.png", width = 12, height = 18, units = "in", res = 500)
grid.newpage() 
pushViewport(viewport(layout = grid.layout(nrow=8, ncol=4, 
                                           heights =c(4,1,5,1,5,1,5,.5))))
vplayout <- function(x, y) viewport(layout.pos.row = x, layout.pos.col = y)

grid.rect(gp = gpar(fill = cspec_pal[4], col = cspec_pal[4]))
grid.text("COVID-19", y = unit(1, "npc"), x = unit(0.5, "npc"), vjust = 1, hjust = .5, gp = gpar(fontfamily = "Impact", col = cspec_pal[3], cex = 12))
grid.text("action plan", y = unit(0.93, "npc"), gp = gpar(fontfamily = "Impact", col = cspec_pal[1], cex = 6.4))
grid.text("by COVID-19 Statistics, Policy Modeling, and Epidemiology Collective", vjust = 0, y = unit(0.89, "npc"), gp = gpar(fontfamily = "Impact", col = cspec_pal[2], cex = 1))
grid.text("http://covid-spec.org/", vjust = 0, y = unit(0.881, "npc"), gp = gpar(fontfamily = "Impact", col = cspec_pal[2], cex = 1))
grid.text("code and documentation can be found at https://github.com/abilinski/COVID19/blob/master/cspec_infographic_plot.R", vjust = 0, y = unit(0.005, "npc"), gp = gpar(fontfamily = "Impact", col = cspec_pal[1], cex = 1))

####line break 
grid.text("it's on you to...", y = unit(0.86, "npc"), x = unit(0.5, "npc"), vjust = .5, hjust = .5, gp = gpar(fontfamily = "Impact", col = cspec_pal[3], cex = 5))

#first plot
print(time, vp = vplayout(3, 1:4))
#second plot
print(effect, vp = vplayout(5, 1:4))
#fourth plot 
print(patience, vp = vplayout(7, 1:4))
#text block one
grid.rect(gp = gpar(fill = cspec_pal[1], col = cspec_pal[1]), x = unit(0.5, "npc"), y = unit(0.80, "npc"), width = unit(1, "npc"), height = unit(0.035, "npc"))
grid.text("...BE IMMEDIATE", y = unit(0.80, "npc"), x = unit(0.5, "npc"), vjust = .5, hjust = .5, gp = gpar(fontfamily = "Impact", col = cspec_pal[3], cex = 4))
#text block two
grid.rect(gp = gpar(fill = cspec_pal[1], col = cspec_pal[1]), x = unit(0.5, "npc"), y = unit(.535, "npc"), width = unit(1, "npc"), height = unit(0.035, "npc"))
grid.text("...BE DEFINITIVE", y = unit(.535, "npc"), x = unit(0.5, "npc"), vjust = .5, hjust = .5, gp = gpar(fontfamily = "Impact", col = cspec_pal[3], cex = 4))
#text block four
grid.rect(gp = gpar(fill = cspec_pal[1], col = cspec_pal[1]), x = unit(0.5, "npc"), y = unit(0.27, "npc"), width = unit(1, "npc"), height = unit(0.034, "npc"))
grid.text("...BE PATIENT", y = unit(0.27, "npc"), x = unit(0.5, "npc"), vjust = .5, hjust = .5, gp = gpar(fontfamily = "Impact", col = cspec_pal[3], cex = 4))

dev.off()

